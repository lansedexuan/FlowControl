########################################0
ubuntu 20.04

########################################1
git clone git@github.com:Guojyjy/CoTV.git

########################################2
conda create -n cotv_env python=3.7 -y 
conda activate cotv_env

########################################3
以下全部使用pip install:
gym==0.14.0
numpy==1.18.4
scipy==1.1.0
lxml==4.4.1
pyprind==2.11.2
nose2==0.8.0
six==1.11.0
path.py
joblib==0.10.3
python-dateutil==2.7.3
cached_property
pyglet==1.3.2
matplotlib==3.1.0
imutils==0.5.1
numpydoc
ray==0.8.0
opencv-python
dill
lz4
setproctitle
psutil
opencv-python
boto3==1.10.45
redis
pandas==0.24.2
plotly==2.4.0
tabulate
tensorflow==1.15.2
awscli==1.16.309
torch==1.4.0
pytz
tensorboardX
protobuf==3.20.3

########################################4
conda activate cotv_env

########################################5
cd ~/CoTV/flow
python setup.py develop
pip install -e

########################################6
新建终端
pip install eclipse-sumo==1.10.0
which sumo
gedit ~/.bashrc
export SUMO_HOME='which sumo下的路径(去掉bin/sumo)'
echo 'export SUMO_HOME="which sumo下的路径(去掉bin/sumo)"'
source ~/.bashrc
sudo apt-get install sumo sumo-tools 
sudo add-apt-repository ppa:sumo/stable
sudo apt-get update
sudo apt-get install sumo sumo-tools sumo-doc
mkdir -p $SUMO_HOME/data/xsd/  # 创建目录
for xsd in \
  additional_file.xsd \
  types_file.xsd \
  nodes_file.xsd \
  edges_file.xsd \
  connections_file.xsd \
  routes_file.xsd \
  net_file.xsd \
  polygons_file.xsd \
  traffic_lights_file.xsd \
  vtypes_file.xsd \
  calibrators_file.xsd \
  ptstops_file.xsd \
  parking_areas_file.xsd \
  detectors_file.xsd \
  routeTypes.xsd \         
  tazTypes.xsd \           
  locationType.xsd        
do
  wget "https://sumo.dlr.de/xsd/$xsd" -P "$SUMO_HOME/data/xsd/"
done

########################################7
conda activate flow
将文件夹里的5个python文件替换到CoTV/flow/examples/exp_configs/rl/multiagent

########################################8
# for 1x1 and 1x6 grid maps
# python examples/train_ppo.py CoTV_grid --num_steps 150
# python examples/train_ppo.py CoTV_grid_16 --num_steps 150

# for Dublin scenario, i.e., six consecutive intersections, or another extended Dublin scenario covering almost 1km^2
# python examples/train_ppo.py CoTV_Dublin --num_steps 150
# python examples/train_ppo.py CoTV_Dublin_1km --num_steps 150
# python examples/train_ppo.py CoTV_Dublin_mix --num_steps 150 # mix penetration rate

# baseline
# python examples/train_dqn.py PressLight_grid --num_steps 150
# python examples/train_dqn.py PressLight_Dublin --num_steps 150
# python examples/train_dqn.py FixedTime_grid --num_steps 150
# python examples/train_dqn.py FixedTime_Dublin --num_steps 150
# python examples/train_dqn.py GLOSA_grid --num_steps 150
# python examples/train_dqn.py GLOSA_Dublin --num_steps 150
# python examples/train_ppo.py FlowCAV_grid --num_steps 150
# python examples/train_ppo.py FlowCAV_Dublin --num_steps 150

########################################9
# for 1x1
# python evaluation/outputFilesProcessing.py --scen CoTV_1x1grid --horizon 720 --output_dir output --save_duration 300
# python evaluation/getResults.py --scen CoTV_1x1grid --output_dir output 

# for 1x6
# python evaluation/outputFilesProcessing.py --scen CoTV_1x6grid --horizon 720 --output_dir output --save_duration 300
# python evaluation/getResults.py --scen CoTV_1x6grid --output_dir output 

# for  Dub grid maps
# python evaluation/outputFilesProcessing.py --scen Dub_CoTV --horizon 720 --output_dir output --save_duration 400
# python evaluation/getResults.py --scen Dub_CoTV --output_dir output

# for  Dub mix cav
# python evaluation/outputFilesProcessing.py --scen Dub_CoTV_mix --horizon 720 --output_dir output --save_duration 400
# python evaluation/getResults.py --scen Dub_CoTV_mix --output_dir output

